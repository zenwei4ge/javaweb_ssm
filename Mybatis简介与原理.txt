什么是Mybatis
                 MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手工设置参数以及抽取结果集。                  MyBatis 使用简单的 XML 或注解来配置和映射基本体，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的                     记录。
                 Mybatis实现了DAO接口与xml映射文件的绑定，自动为我们生成接口的具体实现
 原理详解：
                   MyBatis应用程序根据XML配置文件创建SqlSessionFactory，SqlSessionFactory在根据配置，配置来源于两个地方，一处是配置文件，一处是                         Java代码的注解
                   SqlSession包含了执行sql所需要的所有方法，可以通过SqlSession实例直接运行映射的sql语句，完成对数据的增删改查和事务提交等，用完之后                      关闭SqlSession。
 搭建一个简单的Spring和Mybatis集成的Web项目:
                  基本准备工作
                                    1、安装JDK1.6以上版本，安装与配置

                                    2、下载mybatis-3.2.0版：https://repo1.maven.org/maven2/org/mybatis/mybatis/

                                    3、下载mybatis-spring-1.2.1版：https://repo1.maven.org/maven2/org/mybatis/mybatis-spring/

                                    4、Spring-4.0.0的版本

                                    5、tomacat6.x以上版本即可
                第一步：创建数据库表
                第二步：添加jar包
                第三步：创建model
                            /**
                                     * 用户
                                     * @author liang
                                     *
                                     */
                                    public class User {

                                      private int id;
                                      private String age;
                                      private String userName;
                                      public User(){
                                        super();
                                      }
                                      public int getId() {
                                        return id;
                                      }
                                      public void setId(int id) {
                                        this.id = id;
                                      }
                                      public String getAge() {
                                        return age;
                                      }
                                      public void setAge(String age) {
                                        this.age = age;
                                      }
                                      public String getUserName() {
                                        return userName;
                                      }
                                      public void setUserName(String userName) {
                                        this.userName = userName;
                                      }
                                      public User(int id, String age, String userName) {
                                        super();
                                        this.id = id;
                                        this.age = age;
                                        this.userName = userName;
                                      }
                                    }
             第四步：创建DAO接口
                                  创建一个包mapper，并在其下创建一个UserMapper.java文件作为DAO接口。
                                  package com.tgb.mapper;

                                  import java.util.List;

                                  import com.tgb.model.User;

                                  public interface UserMapper {

                                    void save(User user);
                                    boolean update(User user);
                                    boolean delete(int id);
                                    User findById(int id);
                                    List<User> findAll();
                                  }
               第五步：实现DAO接口
                                   在dao包下创建一个UserMapper.xml文件作为上一步创建的DAO接口的实现。
                                   <?xml version="1.0" encoding="UTF-8"?>
                                  <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
                                  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                                  <!-- 
                                    namespace：必须与对应的接口全类名一致
                                    id:必须与对应接口的某个对应的方法名一致

                                   -->
                                  <mapper namespace="com.tgb.mapper.UserMapper">

                                    <insert id="save" parameterType="User">
                                      insert into t_user(user_name,user_age) values(#{userName},#{age})
                                    </insert>

                                    <update id="update" parameterType="User">
                                      update t_user set user_name=#{userName},user_age=#{age} where user_id=#{id}
                                    </update>

                                    <delete id="delete" parameterType="int">
                                      delete from t_user where user_id=#{id}
                                    </delete>

                                     <!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路劲 -->  
                                    <select id="findById" parameterType="int" resultType="User">
                                      select user_id id,user_name userName,user_age age from t_user where user_id=#{id}
                                    </select>

                                    <select id="findAll" resultType="User">
                                      select user_id id,user_name userName,user_age age from t_user
                                    </select>

                                  </mapper>
             第六步：Mybatis和Spring的整合
                          <?xml version="1.0" encoding="UTF-8"?>
                          <beans xmlns="http://www.springframework.org/schema/beans"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
                            xmlns:context="http://www.springframework.org/schema/context"                                                                          xmlns:tx="http://www.springframework.org/schema/tx"
                            xsi:schemaLocation="
                              http://www.springframework.org/schema/beans
                              http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                              http://www.springframework.org/schema/context
                              http://www.springframework.org/schema/context/spring-context-4.0.xsd
                              http://www.springframework.org/schema/tx
                              http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

                            <!-- 1. 数据源 : DriverManagerDataSource -->
                            <bean id="dataSource"
                              class="org.springframework.jdbc.datasource.DriverManagerDataSource">
                              <property name="driverClassName" value="com.mysql.jdbc.Driver" />
                              <property name="url" value="jdbc:mysql://localhost:3306/mybatis" />
                              <property name="username" value="root" />
                              <property name="password" value="123456" />
                            </bean>

                            <!--
                              2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源

                              MyBatis定义数据源,同意加载配置
                            -->
                            <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                              <property name="dataSource" ref="dataSource"></property>
                              <property name="configLocation" value="classpath:config/mybatis-config.xml" /> 
                            </bean>

                            <!--
                              3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory

                              basePackage:指定sql映射文件/接口所在的包（自动扫描）
                            -->
                            <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
                              <property name="basePackage" value="com.tgb.mapper"></property>
                              <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
                            </bean>

                            <!--
                              4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
                            -->
                            <bean id="txManager"
                              class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                              <property name="dataSource" ref="dataSource"></property>
                            </bean>

                            <!-- 5. 使用声明式事务
                               transaction-manager：引用上面定义的事务管理器
                             -->
                            <tx:annotation-driven transaction-manager="txManager" />

                          </beans>
             第七步：mybatis的配置文件
                                <?xml version="1.0" encoding="UTF-8"?>
                                <!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
                                "http://mybatis.org/dtd/mybatis-3-config.dtd">
                                <configuration>

                                  <!-- 实体类,简称 -设置别名 -->
                                  <typeAliases>
                                    <typeAlias alias="User" type="com.tgb.model.User" />
                                  </typeAliases>
                                  <!-- 实体接口映射资源 -->
                                  <!--
                                    说明：如果xxMapper.xml配置文件放在和xxMapper.java统一目录下，mappers也可以省略，因为                                                        org.mybatis.spring.mapper.MapperFactoryBean默认会去查找与xxMapper.java相同目录和名称的xxMapper.xml
                                  -->
                                  <mappers>
                                    <mapper resource="com/tgb/mapper/userMapper.xml" />
                                  </mappers>

                                </configuration>  


  
